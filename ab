 # CRC-
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#define N strlen(g)
char t[120],cs[120],g[]="1011";
int a,c,e;
void xor()
{
 for(c=1;c<N;c++)
 cs[c]=((cs[c]==g[c])?'0':'1');
 }
 void crc()
 {
  for(e=0;e<N;e++)
  cs[e]=t[e];
  do
  {
  if(cs[0]=='1')
   xor();
   for(c=0;c<N-1;c++)
  cs[c]=cs[c+1];
  cs[c]=t[e++];
  }
  while(e<=a+N-1);
  }
  void main()
  {
  printf("Enter the polynomial\n");
  scanf("%s",t);
  printf("generating polynomial is %s\n",g);
  a=strlen(t);
  for(e=a;e<a+N-1;e++)
  t[e]='0';
  printf("modified t[u] is %s\n",t);
  crc();
  printf("checksum is :%s\n",cs);
  for(e=a;e<a+N-1;e++)
  t[e]=cs[e-a];
  printf("final codeword is %s\n",t);
  printf("test error detection 0(yes)1(no)?;\n");
  scanf("%d",&e);
  if(e==0)
  {
  do
   {
    printf("Enter position where error has to be inserted\n");
    scanf("%d",&e);
    }
   while(e==0||e>a+N-1);
   t[e-1]=(t[e-1]=='0')?'1':'0';
   printf("errorneous data %s\n",t);
   }
   crc();
   for(e=0;(e<N-1)&&(cs[e]!='1');e++);
    if(e<N-1)
     printf("error detected\n");
    else
     printf("error is not detected\n");
   }

//bit stuffing and unstuffing
#include <stdio.h>
#include <string.h>
void bitStuffing(char *data, char *stuffedData) {
    int i, count = 0, j = 0;
    for(i = 0; i < strlen(data); i++) {
        if(data[i] == '1') {
            count++;
            stuffedData[j++] = data[i];
        } else {
            count = 0;
            stuffedData[j++] = data[i]; }
        if(count == 5) { 
            count = 0;
            stuffedData[j++] = '0';    }   }
    stuffedData[j] = '\0'; }
void bitUnstuffing(char *stuffedData, char *unstuffedData) {
    int i, j = 0;
    for(i = 0; i < strlen(stuffedData); i++) {
        if(stuffedData[i] == '1') {
            int onesCount = 1; 
            unstuffedData[j++] = stuffedData[i];
            while(i + 1 < strlen(stuffedData) && stuffedData[i + 1] == '1') {
                unstuffedData[j++] = stuffedData[++i];
                onesCount++;}
            if(onesCount == 5 && stuffedData[i + 1] == '0') {
                i++;}} else {
            unstuffedData[j++] = stuffedData[i]; } }
    unstuffedData[j] = '\0'; }
int main() {
    char data[100], stuffedData[200], unstuffedData[200];
    printf("Enter the data: ");
    scanf("%s", data);
    bitStuffing(data, stuffedData);
    printf("Data after bit stuffing: %s\n", stuffedData);
    bitUnstuffing(stuffedData, unstuffedData);
    printf("Data after bit unstuffing: %s\n", unstuffedData);
    return 0;}
