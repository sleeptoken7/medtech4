 # CRC-
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#define N strlen(g)
char t[120],cs[120],g[]="1011";
int a,c,e;
void xor()
{
 for(c=1;c<N;c++)
 cs[c]=((cs[c]==g[c])?'0':'1');
 }
 void crc()
 {
  for(e=0;e<N;e++)
  cs[e]=t[e];
  do
  {
  if(cs[0]=='1')
   xor();
   for(c=0;c<N-1;c++)
  cs[c]=cs[c+1];
  cs[c]=t[e++];
  }
  while(e<=a+N-1);
  }
  void main()
  {
  printf("Enter the polynomial\n");
  scanf("%s",t);
  printf("generating polynomial is %s\n",g);
  a=strlen(t);
  for(e=a;e<a+N-1;e++)
  t[e]='0';
  printf("modified t[u] is %s\n",t);
  crc();
  printf("checksum is :%s\n",cs);
  for(e=a;e<a+N-1;e++)
  t[e]=cs[e-a];
  printf("final codeword is %s\n",t);
  printf("test error detection 0(yes)1(no)?;\n");
  scanf("%d",&e);
  if(e==0)
  {
  do
   {
    printf("Enter position where error has to be inserted\n");
    scanf("%d",&e);
    }
   while(e==0||e>a+N-1);
   t[e-1]=(t[e-1]=='0')?'1':'0';
   printf("errorneous data %s\n",t);
   }
   crc();
   for(e=0;(e<N-1)&&(cs[e]!='1');e++);
    if(e<N-1)
     printf("error detected\n");
    else
     printf("error is not detected\n");
   }

//bit stuffing and unstuffing
#include <stdio.h>
#include <string.h>
void bitStuffing(char *data, char *stuffedData) {
    int i, count = 0, j = 0;
    for(i = 0; i < strlen(data); i++) {
        if(data[i] == '1') {
            count++;
            stuffedData[j++] = data[i];
        } else {
            count = 0;
            stuffedData[j++] = data[i]; }
        if(count == 5) { 
            count = 0;
            stuffedData[j++] = '0';    }   }
    stuffedData[j] = '\0'; }
void bitUnstuffing(char *stuffedData, char *unstuffedData) {
    int i, j = 0;
    for(i = 0; i < strlen(stuffedData); i++) {
        if(stuffedData[i] == '1') {
            int onesCount = 1; 
            unstuffedData[j++] = stuffedData[i];
            while(i + 1 < strlen(stuffedData) && stuffedData[i + 1] == '1') {
                unstuffedData[j++] = stuffedData[++i];
                onesCount++;}
            if(onesCount == 5 && stuffedData[i + 1] == '0') {
                i++;}} else {
            unstuffedData[j++] = stuffedData[i]; } }
    unstuffedData[j] = '\0'; }
int main() {
    char data[100], stuffedData[200], unstuffedData[200];
    printf("Enter the data: ");
    scanf("%s", data);
    bitStuffing(data, stuffedData);
    printf("Data after bit stuffing: %s\n", stuffedData);
    bitUnstuffing(stuffedData, unstuffedData);
    printf("Data after bit unstuffing: %s\n", unstuffedData);
    return 0;}

TCP-UDP=
TCP Server
#include<stdio.h>
#include<stdlib.h>
#include<arpa/inet.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<errno.h>
#include<unistd.h>
#include<netinet/in.h>
#include<string.h>
int main()
{
struct sockaddr_in server_addr;
struct sockaddr_in client_addr;
FILE *fptr;
int sock,connected,bytes_recv;
char ch,send_data[1024],recv_data[1024];
int sin_size,flag = 0;
if((sock=socket(AF_INET,SOCK_STREAM,0))==-1)
{
perror("socket");
exit(1);
}
server_addr.sin_family=AF_INET;
server_addr.sin_port=htons(6119);
server_addr.sin_addr.s_addr=inet_addr("127.0.0.1");
if(bind(sock,(struct sockaddr *)&server_addr, sizeof(struct sockaddr))==-1)
{
perror("unable to bind");
exit(1);
}
if(listen(sock,5)==-1)
{
perror("lsten");
exit(1);
}
printf("tcp server is waiting for client on port XXXX\n");
sin_size=sizeof(struct sockaddr_in);
connected=accept(sock,(struct sockaddr *)&client_addr,&sin_size);
while(1)
{
bytes_recv=recv(connected,recv_data,1024,0);
recv_data[bytes_recv]='\0';
printf("reciecved data is %s\n\n\n",recv_data);
fptr=fopen(recv_data,"r");
if(fptr==NULL)
{
strcpy(send_data,"FILE");
send(connected,send_data,strlen(send_data),0);
}
ch = fgetc(fptr);
while(ch != EOF)//this loop searches the for the current word
{
 // fscanf(fptr,"%s",send_data);
send_data[flag] = ch;
flag++;
ch = fgetc(fptr);
 //send(connected,send_data,strlen(send_data),0);
}
send(connected,send_data,strlen(send_data),0);
//send_data[0] = 'q';
//strcpy(send_data,"q");
//send(connected,send_data,strlen(send_data),0);
close(connected);
break;
}
}
TCP Client
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<netdb.h>
#include<netinet/in.h>
#include<errno.h>
#include<string.h>
int main()
{
int sock,bytes_recv;
struct sockaddr_in server_addr;
char recv_data[1024],send_data[1024];
struct hostent *host;
host=gethostbyname("127.0.0.1");
if((sock=socket(AF_INET,SOCK_STREAM,0))==-1)
{
perror("socket");
exit(1);
}
server_addr.sin_family=AF_INET;
server_addr.sin_port=htons(6119);
server_addr.sin_addr.s_addr=inet_addr("127.0.0.1");
if(connect(sock,(struct sockaddr *)&server_addr,sizeof(struct sockaddr))==-1)
{
perror("connect");
exit(1);
}
printf("send Filename to send\n");
gets(send_data);
if(strcmp(send_data,"q")!=0)
send(sock,send_data,strlen(send_data),0);
while((bytes_recv=recv(sock,recv_data,1024,0))>0)
{
recv_data[bytes_recv]='\0';
//printf("%s\n\n", recv_data);
//if(strcmp(recv_data,"q")==0)
// {
// close(sock);
// break;
// }
printf("%s\n", recv_data);
}
close(sock);
return 0;
}
3b. Design a program to implement client server model (UDP) Socket programming.
UDP Server
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <stdlib.h>
int main(){
 int udpSocket, nBytes;
 char buffer[1024];
 struct sockaddr_in serverAddr, clientAddr;
 struct sockaddr_storage serverStorage;
 socklen_t addr_size, client_addr_size;
 int i;
 /*Create UDP socket*/
 udpSocket = socket(PF_INET, SOCK_DGRAM, 0);
 /*Configure settings in address struct*/
 serverAddr.sin_family = AF_INET;
 serverAddr.sin_port = htons(8893);
 serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
 memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);
 /*Bind socket with address struct*/
 bind(udpSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));
 /*Initialize size variable to be used later on*/
 addr_size = sizeof serverStorage;
 while(1){
 /* Try to receive any incoming UDP datagram. Address and port of
 * requesting client will be stored on serverStorage variable */
 nBytes = recvfrom(udpSocket,buffer,1024,0,(struct sockaddr *)&serverStorage, &addr_size);
 /*Convert message received to uppercase*/
 for(i=0;i<nBytes-1;i++)
 buffer[i] = toupper(buffer[i]);
 /*Send uppercase message back to client, using serverStorage as the address*/
 sendto(udpSocket,buffer,nBytes,0,(struct sockaddr *)&serverStorage,addr_size);
 }
 return 0;
}
UDP Client
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
int main(){
 int clientSocket, portNum, nBytes;
 char buffer[1024];
 struct sockaddr_in serverAddr;
 socklen_t addr_size;
 /*Create UDP socket*/
 clientSocket = socket(PF_INET, SOCK_DGRAM, 0);
 /*Configure settings in address struct*/
 serverAddr.sin_family = AF_INET;
 serverAddr.sin_port = htons(8893);
 serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
 memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);
 /*Initialize size variable to be used later on*/
 addr_size = sizeof serverAddr;
 while(1){
 printf("Type a sentence to send to server:\n");
 fgets(buffer,1024,stdin);
 printf("You typed: %s",buffer);
 nBytes = strlen(buffer) + 1;

 /*Send message to server*/
 sendto(clientSocket,buffer,nBytes,0,(struct sockaddr *)&serverAddr,addr_size);
 /*Receive message from server*/
 nBytes = recvfrom(clientSocket,buffer,1024,0,NULL, NULL);
 printf("Received from server: %s\n",buffer);
 }
 return 0;
}
